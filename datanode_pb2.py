# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: datanode.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='datanode.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x0e\x64\x61tanode.proto\"B\n\x0cStoreRequest\x12\x11\n\tblockname\x18\x01 \x01(\t\x12\x11\n\ttimestamp\x18\x02 \x01(\t\x12\x0c\n\x04\x64\x61ta\x18\x03 \x01(\x0c\"\x1d\n\nStoreReply\x12\x0f\n\x07success\x18\x01 \x01(\x08\"3\n\x0bReadRequest\x12\x11\n\tblockname\x18\x01 \x01(\t\x12\x11\n\ttimestamp\x18\x02 \x01(\t\"*\n\tReadReply\x12\x0c\n\x04\x64\x61ta\x18\x01 \x01(\x0c\x12\x0f\n\x07success\x18\x02 \x01(\x08\x32U\n\x08\x44\x61taNode\x12%\n\x05Store\x12\r.StoreRequest\x1a\x0b.StoreReply\"\x00\x12\"\n\x04Read\x12\x0c.ReadRequest\x1a\n.ReadReply\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_STOREREQUEST = _descriptor.Descriptor(
  name='StoreRequest',
  full_name='StoreRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='blockname', full_name='StoreRequest.blockname', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='StoreRequest.timestamp', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data', full_name='StoreRequest.data', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=18,
  serialized_end=84,
)


_STOREREPLY = _descriptor.Descriptor(
  name='StoreReply',
  full_name='StoreReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='success', full_name='StoreReply.success', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=86,
  serialized_end=115,
)


_READREQUEST = _descriptor.Descriptor(
  name='ReadRequest',
  full_name='ReadRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='blockname', full_name='ReadRequest.blockname', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='ReadRequest.timestamp', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=117,
  serialized_end=168,
)


_READREPLY = _descriptor.Descriptor(
  name='ReadReply',
  full_name='ReadReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='ReadReply.data', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='success', full_name='ReadReply.success', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=170,
  serialized_end=212,
)

DESCRIPTOR.message_types_by_name['StoreRequest'] = _STOREREQUEST
DESCRIPTOR.message_types_by_name['StoreReply'] = _STOREREPLY
DESCRIPTOR.message_types_by_name['ReadRequest'] = _READREQUEST
DESCRIPTOR.message_types_by_name['ReadReply'] = _READREPLY

StoreRequest = _reflection.GeneratedProtocolMessageType('StoreRequest', (_message.Message,), dict(
  DESCRIPTOR = _STOREREQUEST,
  __module__ = 'datanode_pb2'
  # @@protoc_insertion_point(class_scope:StoreRequest)
  ))
_sym_db.RegisterMessage(StoreRequest)

StoreReply = _reflection.GeneratedProtocolMessageType('StoreReply', (_message.Message,), dict(
  DESCRIPTOR = _STOREREPLY,
  __module__ = 'datanode_pb2'
  # @@protoc_insertion_point(class_scope:StoreReply)
  ))
_sym_db.RegisterMessage(StoreReply)

ReadRequest = _reflection.GeneratedProtocolMessageType('ReadRequest', (_message.Message,), dict(
  DESCRIPTOR = _READREQUEST,
  __module__ = 'datanode_pb2'
  # @@protoc_insertion_point(class_scope:ReadRequest)
  ))
_sym_db.RegisterMessage(ReadRequest)

ReadReply = _reflection.GeneratedProtocolMessageType('ReadReply', (_message.Message,), dict(
  DESCRIPTOR = _READREPLY,
  __module__ = 'datanode_pb2'
  # @@protoc_insertion_point(class_scope:ReadReply)
  ))
_sym_db.RegisterMessage(ReadReply)


import abc
from grpc.beta import implementations as beta_implementations
from grpc.early_adopter import implementations as early_adopter_implementations
from grpc.framework.alpha import utilities as alpha_utilities
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities
class EarlyAdopterDataNodeServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Store(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Read(self, request, context):
    raise NotImplementedError()
class EarlyAdopterDataNodeServer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def start(self):
    raise NotImplementedError()
  @abc.abstractmethod
  def stop(self):
    raise NotImplementedError()
class EarlyAdopterDataNodeStub(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Store(self, request):
    raise NotImplementedError()
  Store.async = None
  @abc.abstractmethod
  def Read(self, request):
    raise NotImplementedError()
  Read.async = None
def early_adopter_create_DataNode_server(servicer, port, private_key=None, certificate_chain=None):
  import datanode_pb2
  import datanode_pb2
  import datanode_pb2
  import datanode_pb2
  method_service_descriptions = {
    "Read": alpha_utilities.unary_unary_service_description(
      servicer.Read,
      datanode_pb2.ReadRequest.FromString,
      datanode_pb2.ReadReply.SerializeToString,
    ),
    "Store": alpha_utilities.unary_unary_service_description(
      servicer.Store,
      datanode_pb2.StoreRequest.FromString,
      datanode_pb2.StoreReply.SerializeToString,
    ),
  }
  return early_adopter_implementations.server("DataNode", method_service_descriptions, port, private_key=private_key, certificate_chain=certificate_chain)
def early_adopter_create_DataNode_stub(host, port, metadata_transformer=None, secure=False, root_certificates=None, private_key=None, certificate_chain=None, server_host_override=None):
  import datanode_pb2
  import datanode_pb2
  import datanode_pb2
  import datanode_pb2
  method_invocation_descriptions = {
    "Read": alpha_utilities.unary_unary_invocation_description(
      datanode_pb2.ReadRequest.SerializeToString,
      datanode_pb2.ReadReply.FromString,
    ),
    "Store": alpha_utilities.unary_unary_invocation_description(
      datanode_pb2.StoreRequest.SerializeToString,
      datanode_pb2.StoreReply.FromString,
    ),
  }
  return early_adopter_implementations.stub("DataNode", method_invocation_descriptions, host, port, metadata_transformer=metadata_transformer, secure=secure, root_certificates=root_certificates, private_key=private_key, certificate_chain=certificate_chain, server_host_override=server_host_override)

class BetaDataNodeServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Store(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Read(self, request, context):
    raise NotImplementedError()

class BetaDataNodeStub(object):
  """The interface to which stubs will conform."""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Store(self, request, timeout):
    raise NotImplementedError()
  Store.future = None
  @abc.abstractmethod
  def Read(self, request, timeout):
    raise NotImplementedError()
  Read.future = None

def beta_create_DataNode_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  import datanode_pb2
  import datanode_pb2
  import datanode_pb2
  import datanode_pb2
  request_deserializers = {
    ('DataNode', 'Read'): datanode_pb2.ReadRequest.FromString,
    ('DataNode', 'Store'): datanode_pb2.StoreRequest.FromString,
  }
  response_serializers = {
    ('DataNode', 'Read'): datanode_pb2.ReadReply.SerializeToString,
    ('DataNode', 'Store'): datanode_pb2.StoreReply.SerializeToString,
  }
  method_implementations = {
    ('DataNode', 'Read'): face_utilities.unary_unary_inline(servicer.Read),
    ('DataNode', 'Store'): face_utilities.unary_unary_inline(servicer.Store),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)

def beta_create_DataNode_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  import datanode_pb2
  import datanode_pb2
  import datanode_pb2
  import datanode_pb2
  request_serializers = {
    ('DataNode', 'Read'): datanode_pb2.ReadRequest.SerializeToString,
    ('DataNode', 'Store'): datanode_pb2.StoreRequest.SerializeToString,
  }
  response_deserializers = {
    ('DataNode', 'Read'): datanode_pb2.ReadReply.FromString,
    ('DataNode', 'Store'): datanode_pb2.StoreReply.FromString,
  }
  cardinalities = {
    'Read': cardinality.Cardinality.UNARY_UNARY,
    'Store': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'DataNode', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
