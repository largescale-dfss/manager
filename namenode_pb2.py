# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: namenode.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='namenode.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x0enamenode.proto\"G\n\x0cStoreRequest\x12\x11\n\tfile_path\x18\x01 \x01(\t\x12\x11\n\tfile_size\x18\x02 \x01(\x05\x12\x11\n\ttimestamp\x18\x03 \x01(\t\"R\n\nStoreReply\x12\x0c\n\x04path\x18\x01 \x01(\t\x12\x11\n\tdatanodes\x18\x02 \x01(\t\x12\x12\n\nblock_size\x18\x03 \x01(\x05\x12\x0f\n\x07success\x18\x04 \x01(\x08\"3\n\x0bReadRequest\x12\x11\n\tfile_path\x18\x01 \x01(\t\x12\x11\n\ttimestamp\x18\x02 \x01(\t\"/\n\tReadReply\x12\x11\n\tdatanodes\x18\x01 \x01(\t\x12\x0f\n\x07success\x18\x02 \x01(\x08\"\x1c\n\x0c\x41liveRequest\x12\x0c\n\x04ping\x18\x01 \x01(\x08\"/\n\nAliveReply\x12\x0e\n\x06health\x18\x01 \x01(\x08\x12\x11\n\treply_msg\x18\x02 \x01(\t2~\n\x08NameNode\x12%\n\x05Store\x12\r.StoreRequest\x1a\x0b.StoreReply\"\x00\x12\"\n\x04Read\x12\x0c.ReadRequest\x1a\n.ReadReply\"\x00\x12\'\n\x07isAlive\x12\r.AliveRequest\x1a\x0b.AliveReply\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_STOREREQUEST = _descriptor.Descriptor(
  name='StoreRequest',
  full_name='StoreRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='file_path', full_name='StoreRequest.file_path', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='file_size', full_name='StoreRequest.file_size', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='StoreRequest.timestamp', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=18,
  serialized_end=89,
)


_STOREREPLY = _descriptor.Descriptor(
  name='StoreReply',
  full_name='StoreReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='StoreReply.path', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='datanodes', full_name='StoreReply.datanodes', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='block_size', full_name='StoreReply.block_size', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='success', full_name='StoreReply.success', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=91,
  serialized_end=173,
)


_READREQUEST = _descriptor.Descriptor(
  name='ReadRequest',
  full_name='ReadRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='file_path', full_name='ReadRequest.file_path', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='ReadRequest.timestamp', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=175,
  serialized_end=226,
)


_READREPLY = _descriptor.Descriptor(
  name='ReadReply',
  full_name='ReadReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='datanodes', full_name='ReadReply.datanodes', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='success', full_name='ReadReply.success', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=228,
  serialized_end=275,
)


_ALIVEREQUEST = _descriptor.Descriptor(
  name='AliveRequest',
  full_name='AliveRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ping', full_name='AliveRequest.ping', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=277,
  serialized_end=305,
)


_ALIVEREPLY = _descriptor.Descriptor(
  name='AliveReply',
  full_name='AliveReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='health', full_name='AliveReply.health', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='reply_msg', full_name='AliveReply.reply_msg', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=307,
  serialized_end=354,
)

DESCRIPTOR.message_types_by_name['StoreRequest'] = _STOREREQUEST
DESCRIPTOR.message_types_by_name['StoreReply'] = _STOREREPLY
DESCRIPTOR.message_types_by_name['ReadRequest'] = _READREQUEST
DESCRIPTOR.message_types_by_name['ReadReply'] = _READREPLY
DESCRIPTOR.message_types_by_name['AliveRequest'] = _ALIVEREQUEST
DESCRIPTOR.message_types_by_name['AliveReply'] = _ALIVEREPLY

StoreRequest = _reflection.GeneratedProtocolMessageType('StoreRequest', (_message.Message,), dict(
  DESCRIPTOR = _STOREREQUEST,
  __module__ = 'namenode_pb2'
  # @@protoc_insertion_point(class_scope:StoreRequest)
  ))
_sym_db.RegisterMessage(StoreRequest)

StoreReply = _reflection.GeneratedProtocolMessageType('StoreReply', (_message.Message,), dict(
  DESCRIPTOR = _STOREREPLY,
  __module__ = 'namenode_pb2'
  # @@protoc_insertion_point(class_scope:StoreReply)
  ))
_sym_db.RegisterMessage(StoreReply)

ReadRequest = _reflection.GeneratedProtocolMessageType('ReadRequest', (_message.Message,), dict(
  DESCRIPTOR = _READREQUEST,
  __module__ = 'namenode_pb2'
  # @@protoc_insertion_point(class_scope:ReadRequest)
  ))
_sym_db.RegisterMessage(ReadRequest)

ReadReply = _reflection.GeneratedProtocolMessageType('ReadReply', (_message.Message,), dict(
  DESCRIPTOR = _READREPLY,
  __module__ = 'namenode_pb2'
  # @@protoc_insertion_point(class_scope:ReadReply)
  ))
_sym_db.RegisterMessage(ReadReply)

AliveRequest = _reflection.GeneratedProtocolMessageType('AliveRequest', (_message.Message,), dict(
  DESCRIPTOR = _ALIVEREQUEST,
  __module__ = 'namenode_pb2'
  # @@protoc_insertion_point(class_scope:AliveRequest)
  ))
_sym_db.RegisterMessage(AliveRequest)

AliveReply = _reflection.GeneratedProtocolMessageType('AliveReply', (_message.Message,), dict(
  DESCRIPTOR = _ALIVEREPLY,
  __module__ = 'namenode_pb2'
  # @@protoc_insertion_point(class_scope:AliveReply)
  ))
_sym_db.RegisterMessage(AliveReply)


import abc
from grpc.beta import implementations as beta_implementations
from grpc.early_adopter import implementations as early_adopter_implementations
from grpc.framework.alpha import utilities as alpha_utilities
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities
class EarlyAdopterNameNodeServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Store(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Read(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def isAlive(self, request, context):
    raise NotImplementedError()
class EarlyAdopterNameNodeServer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def start(self):
    raise NotImplementedError()
  @abc.abstractmethod
  def stop(self):
    raise NotImplementedError()
class EarlyAdopterNameNodeStub(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Store(self, request):
    raise NotImplementedError()
  Store.async = None
  @abc.abstractmethod
  def Read(self, request):
    raise NotImplementedError()
  Read.async = None
  @abc.abstractmethod
  def isAlive(self, request):
    raise NotImplementedError()
  isAlive.async = None
def early_adopter_create_NameNode_server(servicer, port, private_key=None, certificate_chain=None):
  import namenode_pb2
  import namenode_pb2
  import namenode_pb2
  import namenode_pb2
  import namenode_pb2
  import namenode_pb2
  method_service_descriptions = {
    "Read": alpha_utilities.unary_unary_service_description(
      servicer.Read,
      namenode_pb2.ReadRequest.FromString,
      namenode_pb2.ReadReply.SerializeToString,
    ),
    "Store": alpha_utilities.unary_unary_service_description(
      servicer.Store,
      namenode_pb2.StoreRequest.FromString,
      namenode_pb2.StoreReply.SerializeToString,
    ),
    "isAlive": alpha_utilities.unary_unary_service_description(
      servicer.isAlive,
      namenode_pb2.AliveRequest.FromString,
      namenode_pb2.AliveReply.SerializeToString,
    ),
  }
  return early_adopter_implementations.server("NameNode", method_service_descriptions, port, private_key=private_key, certificate_chain=certificate_chain)
def early_adopter_create_NameNode_stub(host, port, metadata_transformer=None, secure=False, root_certificates=None, private_key=None, certificate_chain=None, server_host_override=None):
  import namenode_pb2
  import namenode_pb2
  import namenode_pb2
  import namenode_pb2
  import namenode_pb2
  import namenode_pb2
  method_invocation_descriptions = {
    "Read": alpha_utilities.unary_unary_invocation_description(
      namenode_pb2.ReadRequest.SerializeToString,
      namenode_pb2.ReadReply.FromString,
    ),
    "Store": alpha_utilities.unary_unary_invocation_description(
      namenode_pb2.StoreRequest.SerializeToString,
      namenode_pb2.StoreReply.FromString,
    ),
    "isAlive": alpha_utilities.unary_unary_invocation_description(
      namenode_pb2.AliveRequest.SerializeToString,
      namenode_pb2.AliveReply.FromString,
    ),
  }
  return early_adopter_implementations.stub("NameNode", method_invocation_descriptions, host, port, metadata_transformer=metadata_transformer, secure=secure, root_certificates=root_certificates, private_key=private_key, certificate_chain=certificate_chain, server_host_override=server_host_override)

class BetaNameNodeServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Store(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Read(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def isAlive(self, request, context):
    raise NotImplementedError()

class BetaNameNodeStub(object):
  """The interface to which stubs will conform."""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Store(self, request, timeout):
    raise NotImplementedError()
  Store.future = None
  @abc.abstractmethod
  def Read(self, request, timeout):
    raise NotImplementedError()
  Read.future = None
  @abc.abstractmethod
  def isAlive(self, request, timeout):
    raise NotImplementedError()
  isAlive.future = None

def beta_create_NameNode_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  import namenode_pb2
  import namenode_pb2
  import namenode_pb2
  import namenode_pb2
  import namenode_pb2
  import namenode_pb2
  request_deserializers = {
    ('NameNode', 'Read'): namenode_pb2.ReadRequest.FromString,
    ('NameNode', 'Store'): namenode_pb2.StoreRequest.FromString,
    ('NameNode', 'isAlive'): namenode_pb2.AliveRequest.FromString,
  }
  response_serializers = {
    ('NameNode', 'Read'): namenode_pb2.ReadReply.SerializeToString,
    ('NameNode', 'Store'): namenode_pb2.StoreReply.SerializeToString,
    ('NameNode', 'isAlive'): namenode_pb2.AliveReply.SerializeToString,
  }
  method_implementations = {
    ('NameNode', 'Read'): face_utilities.unary_unary_inline(servicer.Read),
    ('NameNode', 'Store'): face_utilities.unary_unary_inline(servicer.Store),
    ('NameNode', 'isAlive'): face_utilities.unary_unary_inline(servicer.isAlive),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)

def beta_create_NameNode_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  import namenode_pb2
  import namenode_pb2
  import namenode_pb2
  import namenode_pb2
  import namenode_pb2
  import namenode_pb2
  request_serializers = {
    ('NameNode', 'Read'): namenode_pb2.ReadRequest.SerializeToString,
    ('NameNode', 'Store'): namenode_pb2.StoreRequest.SerializeToString,
    ('NameNode', 'isAlive'): namenode_pb2.AliveRequest.SerializeToString,
  }
  response_deserializers = {
    ('NameNode', 'Read'): namenode_pb2.ReadReply.FromString,
    ('NameNode', 'Store'): namenode_pb2.StoreReply.FromString,
    ('NameNode', 'isAlive'): namenode_pb2.AliveReply.FromString,
  }
  cardinalities = {
    'Read': cardinality.Cardinality.UNARY_UNARY,
    'Store': cardinality.Cardinality.UNARY_UNARY,
    'isAlive': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'NameNode', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
